#!/bin/bash
set -e

# bandcamp-dump
# Downloads public discographies from Bandcamp.
# Now with support for using a local list if no URL is provided.
BANDCAMP_URL_LIST="$PWD/bandcamp-dump.lst"
url="$1"

# --- Main Logic ---

# Check if a URL was passed as an argument.
if [ -n "$url" ];
then
    # If a URL is provided, generate a new list.
    echo "--> URL found. Generating new download list: $BANDCAMP_URL_LIST"

    # Set a trap to clean up the file we are about to create.
    trap "echo '--> Cleaning up generated list.'; rm -f '$BANDCAMP_URL_LIST'" EXIT

    # Use lynx to extract album/track URLs and save them to the list file.
    lynx -dump -listonly -nonumbers "$url" | \
      grep -v "downloading" | \
      grep "bandcamp.com/track\|album" \
      > "$BANDCAMP_URL_LIST"
else
    # If no URL is provided, look for an existing list file.
    echo "--> No URL provided. Looking for existing list at: $BANDCAMP_URL_LIST"
    if [ ! -f "$BANDCAMP_URL_LIST" ];
    then
        # If no file is found, print an error and exit.
        echo "--> Error: No URL was passed and '$BANDCAMP_URL_LIST' was not found." >&2
        echo "--> Usage: $0 [bandcamp_url]" >&2
        exit 1
    fi
    echo "--> Found existing list. Proceeding with downloads."
fi


# --- Download Loop ---

# Verify that the list actually contains something before proceeding.
if [ ! -s "$BANDCAMP_URL_LIST" ]; then
    echo "--> Warning: Link list is empty. Nothing to download."
    exit 0
fi

echo "--> Starting downloads..."

# Use a 'while read' loop for safely reading each line from the list.
while IFS= read -r item_url; do
    # Skip any potential empty lines in the list file
    [ -z "$item_url" ] && continue

    # Clean up and validate the URL
    cleaned_url="${item_url%$'\r'}"
    if [[ ! "$cleaned_url" =~ ^https?:// ]]; then
        cleaned_url="https://$cleaned_url"
    fi

    echo "--> Processing Album/Track URL: $cleaned_url"
    
    # Fetch the page content
    page_content=$(curl -s -L "$cleaned_url")

    # Extract and clean the tralbum data JSON blob
    tralbum_json=$(echo "$page_content" | pup 'script[data-tralbum] attr{data-tralbum}' | perl -MHTML::Entities -pe 'decode_entities($_)')

    if [ -z "$tralbum_json" ]; then
        echo "--> Warning: Could not find data-tralbum blob for $cleaned_url. Skipping."
        continue
    fi

    # Extract the main album ID
    album_id=$(echo "$tralbum_json" | jq -r '.id | tostring')
    if ! [[ "$album_id" =~ ^[0-9]+$ ]]; then
        album_id="unknown_album_id"
    fi

    # --- HYBRID LOGIC ---
    # Pre-check for duplicate track numbers and titles to avoid overwrites.
    # This jq command returns 'true' if any combination of track_num and title appears more than once.
    has_duplicates=$(echo "$tralbum_json" | jq '[.trackinfo[] | {num: .track_num, title: .title}] | group_by(.) | any(.[]; length > 1)')

    if [ "$has_duplicates" = "true" ]; then
        # --- SAFE MODE: Individual Track Downloads ---
        echo "    -> Duplicate track numbers/titles found. Switching to safe individual download mode."
        
        base_url=$(echo "$cleaned_url" | sed -E 's|(https?://[^/]+)/.*|\1|')

        echo "$tralbum_json" | jq -c '.trackinfo[]' | while IFS= read -r track_json; do
            track_id=$(echo "$track_json" | jq -r '.track_id')
            track_title=$(echo "$track_json" | jq -r '.title')
            track_num=$(echo "$track_json" | jq -r '.track_num')
            track_url_path=$(echo "$track_json" | jq -r '.title_link')
            track_full_url="${base_url}${track_url_path}"

            echo "        -> Downloading Track: \"${track_title}\" (ID: ${track_id})"
            
            bandcamp-dl \
                --no-confirm \
                --base-dir="$PWD" \
                --keep-upper --keep-spaces --embed-art --embed-lyrics \
                --template "%{album} [${album_id}]/${track_num}. %{title} [${track_id}]" \
                "$track_full_url"
        done

    else
        # --- EFFICIENT MODE: Single Album Download ---
        echo "    -> No duplicates found. Using efficient single-album download mode."
        bandcamp-dl \
            --no-confirm \
            --base-dir="$PWD" \
            --keep-upper --keep-spaces --embed-art --embed-lyrics \
            --template "%{album} [${album_id}]/%{track}. %{title}" \
            "$cleaned_url"
    fi
    # --- END HYBRID LOGIC ---

done < "$BANDCAMP_URL_LIST"

echo "--> All downloads finished."